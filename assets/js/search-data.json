{
  
    
        "post0": {
            "title": "Title",
            "content": "from vega_datasets import data . cars = data.cars() . cars.head() . Name Miles_per_Gallon Cylinders Displacement Horsepower Weight_in_lbs Acceleration Year Origin . 0 | chevrolet chevelle malibu | 18.0 | 8 | 307.0 | 130.0 | 3504 | 12.0 | 1970-01-01 | USA | . 1 | buick skylark 320 | 15.0 | 8 | 350.0 | 165.0 | 3693 | 11.5 | 1970-01-01 | USA | . 2 | plymouth satellite | 18.0 | 8 | 318.0 | 150.0 | 3436 | 11.0 | 1970-01-01 | USA | . 3 | amc rebel sst | 16.0 | 8 | 304.0 | 150.0 | 3433 | 12.0 | 1970-01-01 | USA | . 4 | ford torino | 17.0 | 8 | 302.0 | 140.0 | 3449 | 10.5 | 1970-01-01 | USA | . cars.shape . (406, 9) . import pandas as pd data = pd.DataFrame({&#39;a&#39;: list(&#39;CCCDDDEEE&#39;), &#39;b&#39;: [2, 7, 4, 1, 2, 6, 8, 4, 7]}) . data . a b . 0 | C | 2 | . 1 | C | 7 | . 2 | C | 4 | . 3 | D | 1 | . 4 | D | 2 | . 5 | D | 6 | . 6 | E | 8 | . 7 | E | 4 | . 8 | E | 7 | . chart = alt.Chart(data).mark_bar().encode( y=&#39;a&#39;, x=&#39;average(b)&#39;, ) chart . from vega_datasets import data source = data.iowa_electricity() alt.Chart(source).mark_area().encode( x=&quot;year:T&quot;, y=&quot;net_generation:Q&quot;, color=&quot;source:N&quot; ) . source.head() . year source net_generation . 0 | 2001-01-01 | Fossil Fuels | 35361 | . 1 | 2002-01-01 | Fossil Fuels | 35991 | . 2 | 2003-01-01 | Fossil Fuels | 36234 | . 3 | 2004-01-01 | Fossil Fuels | 36205 | . 4 | 2005-01-01 | Fossil Fuels | 36883 | . source = data.unemployment_across_industries.url alt.Chart(source).mark_area().encode( alt.X(&#39;yearmonth(date):T&#39;, axis=alt.Axis(format=&#39;%Y&#39;, domain=False, tickSize=0) ), alt.Y(&#39;sum(count):Q&#39;, stack=&#39;center&#39;, axis=None), alt.Color(&#39;series:N&#39;, scale=alt.Scale(scheme=&#39;category20b&#39;) ) ).interactive() . # source = alt.UrlData( data.flights_2k.url, format={&#39;parse&#39;: {&#39;date&#39;: &#39;date&#39;}} ) brush = alt.selection(type=&#39;interval&#39;, encodings=[&#39;x&#39;]) # Define the base chart, with the common parts of the # background and highlights base = alt.Chart().mark_bar().encode( x=alt.X(alt.repeat(&#39;column&#39;), type=&#39;quantitative&#39;, bin=alt.Bin(maxbins=20)), y=&#39;count()&#39; ).properties( width=160, height=130 ) # gray background with selection background = base.encode( color=alt.value(&#39;#ddd&#39;) ).add_selection(brush) # blue highlights on the transformed data highlight = base.transform_filter(brush) # layer the two charts &amp; repeat alt.layer( background, highlight, data=source ).transform_calculate( &quot;time&quot;, &quot;hours(datum.date)&quot; ).repeat(column=[&quot;distance&quot;, &quot;delay&quot;, &quot;time&quot;]) .",
            "url": "https://natesolon.github.io/fastpages/2020/03/18/altair.html",
            "relUrl": "/2020/03/18/altair.html",
            "date": " • Mar 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://natesolon.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://natesolon.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}